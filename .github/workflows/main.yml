name: Ruby

on: [push]

env:
  TARGET: x86_64-unknown-linux-gnu

jobs:
  # borrowed from https://github.com/bytecodealliance/cargo-wasi/
  # workflow setup
  cross_compile:
    strategy:
      matrix:
        target:
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: so
          - target: x86_64-apple-darwin
            os: macos-latest
            ext: dylib
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: dll

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            target: ${{ matrix.target }}

      # Target older versions of OSX (as old as we reasonably can) to ensure we
      # can run across a wide variety of systems.
      - name: Configure OSX deployment target
        if: matrix.os == 'macos-latest'
        run: |
          echo MACOSX_DEPLOYMENT_TARGET=10.7 >> $GITHUB_ENV

      # Don't link the CRT dynamically to increase our binary compatibility.
      - name: Configure Windows build flags
        if: matrix.os == 'windows-latest'
        run: |
          echo RUSTFLAGS=-Ctarget-feature=+crt-static >> $GITHUB_ENV

      - name: Compile
        run: |
          cargo build --release --target ${{ matrix.target }}

      - uses: actions/upload-artifact@v2
        with:
          name: rusty_hello-rs-${{ matrix.os }}
          path: target/${{ matrix.target }}/release/librusty_hello.${{ matrix.ext }}

  build:
    runs-on: ubuntu-latest

    needs: [cross_compile]

    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock')}}-ruby-2.7.1

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1

    - name: Pull compiled libraries
      uses: actions/download-artifact@v2
      with:
        path: lib/rusty_hello/

    - name: Default task
      run: |
        gem install bundler -v 2.2.0
        bundle install --path vendor/bundle
        bundle exec rspec

    - name: Build gem
      run: |
        gem build rusty_hello.gemspec --output=rusty_hello.gem

    - uses: actions/upload-artifact@v2
      with:
        name: rusty_hello.gem
        path: rusty_hello.gem

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    needs: [build]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
    - uses: actions/download-artifact@v2
      with:
        name: rusty_hello.gem
    - name: Install gem
      run: |
        gem install rusty_hello.gem
    - name: Test FFI Platform
      run: |
        ruby test_ffi.rb
    - name: Test Gem
      run: |
        ruby test_gem.rb
